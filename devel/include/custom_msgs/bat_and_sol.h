// Generated by gencpp from file custom_msgs/bat_and_sol.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_BAT_AND_SOL_H
#define CUSTOM_MSGS_MESSAGE_BAT_AND_SOL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct bat_and_sol_
{
  typedef bat_and_sol_<ContainerAllocator> Type;

  bat_and_sol_()
    : batStatus()
    , solStatus()
    , runtime()
    , voltage(0.0)
    , battery_percentage(0.0)  {
    }
  bat_and_sol_(const ContainerAllocator& _alloc)
    : batStatus(_alloc)
    , solStatus(_alloc)
    , runtime(_alloc)
    , voltage(0.0)
    , battery_percentage(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _batStatus_type;
  _batStatus_type batStatus;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _solStatus_type;
  _solStatus_type solStatus;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _runtime_type;
  _runtime_type runtime;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _battery_percentage_type;
  _battery_percentage_type battery_percentage;





  typedef boost::shared_ptr< ::custom_msgs::bat_and_sol_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::bat_and_sol_<ContainerAllocator> const> ConstPtr;

}; // struct bat_and_sol_

typedef ::custom_msgs::bat_and_sol_<std::allocator<void> > bat_and_sol;

typedef boost::shared_ptr< ::custom_msgs::bat_and_sol > bat_and_solPtr;
typedef boost::shared_ptr< ::custom_msgs::bat_and_sol const> bat_and_solConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::bat_and_sol_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::bat_and_sol_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_msgs': ['/home/ubuntu/Ubiquity-Pi/src/custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::bat_and_sol_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::bat_and_sol_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::bat_and_sol_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::bat_and_sol_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::bat_and_sol_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::bat_and_sol_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::bat_and_sol_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5782c79eb06aac24e86dd4fe43a05d5f";
  }

  static const char* value(const ::custom_msgs::bat_and_sol_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5782c79eb06aac24ULL;
  static const uint64_t static_value2 = 0xe86dd4fe43a05d5fULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::bat_and_sol_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/bat_and_sol";
  }

  static const char* value(const ::custom_msgs::bat_and_sol_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::bat_and_sol_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string batStatus\n\
string solStatus\n\
string runtime\n\
float32 voltage\n\
float32 battery_percentage\n\
";
  }

  static const char* value(const ::custom_msgs::bat_and_sol_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::bat_and_sol_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.batStatus);
      stream.next(m.solStatus);
      stream.next(m.runtime);
      stream.next(m.voltage);
      stream.next(m.battery_percentage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bat_and_sol_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::bat_and_sol_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::bat_and_sol_<ContainerAllocator>& v)
  {
    s << indent << "batStatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.batStatus);
    s << indent << "solStatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.solStatus);
    s << indent << "runtime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.runtime);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "battery_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_percentage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_BAT_AND_SOL_H
